function [H, P, llr, exitflag] = circ_vmm3_test_ts_mu(data_a, data_b, alpha, options)
%CIRC_VMUM_TEST_SS one sample test for vMUM model
%
%   Audio Circular Statistics (ACS) library
%   Copyright 2016 Enzo De Sena

assert(iscolumn(data_a));
assert(iscolumn(data_b));

if nargin <= 3 || isempty(alpha)
    alpha = 0.05;
end

assert(isscalar(alpha));

if nargin <= 4    
    options = optimoptions('fmincon', ...
            'Display', 'notify-detailed', ...
            'Algorithm', 'sqp', ...
            'MaxFunEvals', 2000);
end

%% Assert
assert(isvector(data_a));
assert(isvector(data_b));
assert(isscalar(alpha));

%% Calculate ll of null hypothesis
% Calculate ML of parameters, assuming mu=mu_0 and with 
% starting point using vMUM-MM method
[mu_mm_0, k_mm_0, p_mm_0] = circ_vmm3_est_mm([data_a; data_b]);
[mu_ml_0, k_ml_0, p_ml_0, ll_0, exitflag_0] = ...
    circ_vmm3_est_ml([data_a; data_b], mu_mm_0, k_mm_0, p_mm_0, options);


%% Calculate ll of alternate hypothesis
[~, ll_a_1_neg, exitflag_a_1] = fmincon(@(params) ...
                   -sum(log(circ_vmm_pdf([params(1), params(1)+pi], ...
                                         [params(2), params(2)], ...
                                         [params(3), 1-params(3)], data_a)))...
                   -sum(log(circ_vmm_pdf([params(4), params(4)+pi], ...
                                         [params(2), params(2)], ...
                                         [params(3), 1-params(3)], data_b))), ...
                   [mu_ml_0, k_ml_0, p_ml_0, mu_ml_0], [], [], ...
                   [], [], ...
                   [-inf, -inf, 0, -inf], [inf, inf, 1, inf], ...
                   [], options);
ll_a_1 = -ll_a_1_neg;

[~, ll_b_1_neg, exitflag_b_1] = fmincon(@(params) ...
                   -sum(log(circ_vmm_pdf([params(1), params(1)+pi], ...
                                         [params(2), params(2)], ...
                                         [params(3), 1-params(3)], data_a)))...
                   -sum(log(circ_vmm_pdf([params(4), params(4)+pi], ...
                                         [params(2), params(2)], ...
                                         [params(3), 1-params(3)], data_b))), ...
                   [circ_mean(mod(data_a*2, 2*pi))/2, k_ml_0, p_ml_0, ...
                    circ_mean(mod(data_b*2, 2*pi))/2], [], [], ...
                   [], [], ...
                   [-inf, -inf, 0, -inf], [inf, inf, 1, inf], ...
                   [], options);
ll_b_1 = -ll_b_1_neg;

if ll_a_1 > ll_b_1
    ll_1 = ll_a_1;
    exitflag_1 = exitflag_a_1;
else
    ll_1 = ll_b_1;
    exitflag_1 = exitflag_b_1;
end

%% Run test
llr = 2*(ll_1-ll_0);
P = 1 - chi2cdf(llr, 1);
H = P < alpha;
exitflag = min(exitflag_0, exitflag_1);

end
